[build-system]
build-backend = "hatchling.build"
requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "scirpy"
description = "Python library for single-cell adaptive immune receptor repertoire (AIRR) analysis"
readme = "README.md"
license = { file = "LICENSE" }
maintainers = [
  { name = "Gregor Sturm", email = "mail@gregor-sturm.de" },
]
authors = [
  { name = "Gregor Sturm" },
  { name = "Tamas Szabo" },
]
requires-python = ">=3.10"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [ "version" ]
dependencies = [
  "adjusttext>=0.7",
  "airr>=1.4.1",
  "anndata>=0.9",
  "awkward>=2.1",
  # 0.10.0 and 0.10.1 have the bug described in https://github.com/igraph/python-igraph/issues/570
  "igraph!=0.10,!=0.10.1",
  "joblib>=1.3.1",
  "logomaker!=0.8.5",
  "mudata>=0.2.3",
  "networkx>=2.5",
  "numba>=0.41",
  "numpy>=1.17",
  "pandas>=1.5,!=2.1.2",
  "pooch>=1.7",
  "pycairo>=1.20; sys_platform=='win32'",
  "python-levenshtein",
  "scanpy>=1.9.3",
  "scikit-learn",
  "scipy",
  "squarify",
  "tqdm>=4.63",                           # https://github.com/tqdm/tqdm/issues/1082
]

optional-dependencies.cupy = [
  "cupy-cuda12x",
]
optional-dependencies.dandelion = [
  "sc-dandelion>=0.3.5",
]
optional-dependencies.dev = [
  "pre-commit",
]
optional-dependencies.diversity = [
  "scikit-bio>=0.5.7",
]
optional-dependencies.doc = [
  "docutils>=0.8,!=0.18.*,!=0.19.*",
  # for tutorial
  "ipykernel",
  "ipython",
  "ipywidgets",
  "jupyter-client",
  "jupytext",
  "leidenalg",
  "muon>0.1.6",
  "myst-nb",
  "myst-nb>=1.1",
  # for executing notebooks on CI
  "nbconvert",
  "pycairo",
  "sc-dandelion",
  "sphinx>=7,<7.4",           # https://github.com/sphinx-doc/sphinx/issues/12589
  "sphinx-autodoc-typehints",
  "sphinx-book-theme>=1",
  "sphinx-copybutton",
  "sphinxcontrib-bibtex>=1",
  "sphinxext-opengraph",
  # I don't know why this would be needed, but it complains about zarr missing when building
  # the documentation. Probably related to importing some types from anndata.
  "zarr<3",
]
optional-dependencies.parasail = [
  # parasail 1.2.1 fails to be installd on MacOS
  "parasail!=1.2.1",
]
optional-dependencies.rpack = [
  "rectangle-packer",
]
optional-dependencies.test = [
  "black",
  "coverage",
  "parasail!=1.2.1",
  "pytest",
  "rectangle-packer",
  "sc-dandelion>=0.3.5",
  "scikit-bio>=0.5.7",
]
urls.Documentation = "https://scirpy.readthedocs.io/"
urls.Home-page = "https://github.com/scverse/scirpy"
urls.Source = "https://github.com/scverse/scirpy"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.envs.docs]
features = [ "doc" ]
scripts.build = "sphinx-build -M html docs docs/_build {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "git clean -fdX -- {args:docs}"

[tool.hatch.envs.hatch-test]
features = [ "test" ]
default-args = [ "src/scirpy/tests", "-n", "4" ]
parallel = true

[tool.ruff]
line-length = 120
src = [ "src" ]
extend-include = [ "*.ipynb" ]

format.docstring-code-format = true
lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "B008",
  # no explicit `stackelvel` keywork argument found
  "B028",
  # Missing docstring in public module
  "D100",
  # missing docstring in public function
  "D103",
  # Missing docstring in public package
  "D104",
  # __magic__ methods are often self-explanatory, allow missing docstrings
  "D105",
  # Missing docstring in __init__
  "D107",
  ## Disable one in each pair of mutually incompatible rules
  # We donâ€™t want a blank line before a class docstring
  "D203",
  # 1 blank line required between summary line and description
  "D205",
  # We want docstrings to start immediately after the opening triple quote
  "D213",
  # Use `r"""` if any backslashes in a docstring
  "D301",
  # first line should end with a period [Bug: doesn't work with single-line docstrings]
  "D400",
  # First line should be in imperative mood; try rephrasing
  "D401",
  # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E501",
  # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E731",
  # allow I, O, l as variable names -> I is the identity matrix
  "E741",
]
lint.per-file-ignores."*.ipynb" = [ "E402" ] # Module level import not at top of cell
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."src/scirpy/datasets/_processing_scripts/*" = [ "B018", "E402" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest.ini_options]
testpaths = "src/scirpy/tests"
xfail_strict = true
addopts = [ "-m not gpu" ]
markers = [
  "conda: marks a subset of tests to be ran on the Bioconda CI.",
  "extra: marks tests that require extra dependencies.",
  "gpu: mark test to run on GPU",
]
minversion = 6.0
norecursedirs = [ '.*', 'build', 'dist', '*.egg', 'data', '__pycache__' ]

[tool.coverage.run]
source = [ "scirpy" ]
omit = [
  "**/test_*.py",
]

[tool.cruft]
skip = [
  "tests",
  "src/**/__init__.py",
  "src/**/basic.py",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
]
