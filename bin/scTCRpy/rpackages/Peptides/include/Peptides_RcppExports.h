// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_Peptides_RCPPEXPORTS_H_GEN_
#define RCPP_Peptides_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace Peptides {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("Peptides", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("Peptides", "Peptides_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in Peptides");
            }
        }
    }

    inline Rcpp::List chargeList(std::vector< std::string > seq, NumericVector pH, std::string pKscale = "Lehninger") {
        typedef SEXP(*Ptr_chargeList)(SEXP,SEXP,SEXP);
        static Ptr_chargeList p_chargeList = NULL;
        if (p_chargeList == NULL) {
            validateSignature("Rcpp::List(*chargeList)(std::vector< std::string >,NumericVector,std::string)");
            p_chargeList = (Ptr_chargeList)R_GetCCallable("Peptides", "Peptides_chargeList");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_chargeList(Rcpp::wrap(seq), Rcpp::wrap(pH), Rcpp::wrap(pKscale));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double absoluteCharge(std::string seq, double pH = 7, std::string pKscale = "Lehninger") {
        typedef SEXP(*Ptr_absoluteCharge)(SEXP,SEXP,SEXP);
        static Ptr_absoluteCharge p_absoluteCharge = NULL;
        if (p_absoluteCharge == NULL) {
            validateSignature("double(*absoluteCharge)(std::string,double,std::string)");
            p_absoluteCharge = (Ptr_absoluteCharge)R_GetCCallable("Peptides", "Peptides_absoluteCharge");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_absoluteCharge(Rcpp::wrap(seq), Rcpp::wrap(pH), Rcpp::wrap(pKscale));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_Peptides_RCPPEXPORTS_H_GEN_
