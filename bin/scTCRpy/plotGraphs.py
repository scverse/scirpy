#!/usr/bin/python
# -*- coding: utf-8 -*-


import math,  collections, matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd

def __main__():
    print 'This module is not intended for direct command line usage. Currently suports import to Python only.'
    return

class colorPalette:
    def __init__(self, colors, expandcorrection=1, shiftcorrection=0, is_divergent=False):
        self.N = len(colors)
        self.colors = tuple(colors)
        self.a = expandcorrection
        self.b = shiftcorrection
        if is_divergent:
            self.a = self.a*0.5
            self.b = self.b+0.5
        return
    
    def __getitem__(self, i):
        if type(i) == str:
            return i
        else:
            if type(i) == list:
                colorl = []
                for e in i:
                    color = self.colors[0]
                    if isinstance(e, int):
                        color = self.colorOfInt(e)
                    else:
                        if isinstance(e, float):
                            color = self.colorOfFloat(e)
                    colorl.append(color)
                return colorl
            else:
                if isinstance(i, int):
                    return self.colorOfInt(i)
                else:
                    if isinstance(i, float):
                        return self.colorOfFloat(i)
                    else:
                        return self.colors[0]
    
    def colorOfInt(self, i):
        if i < self.N:
            return self.colors[i]
        else:
            return self.colors[-1]
        return
    
    def colorOfFloat(self, i):
        x = self.a*i + self.b
        if x > 0:
            if x < 1:
                return self.colors[int(self.N*x)]
            else:
                return self.colors[-1]
        else:
            return self.colors[0]

discretePal = colorPalette(['#008E9B', '#0087AF', '#407CB8', '#746DB1', '#9B5A99', '#B14A73'])
discretePal = colorPalette(['#4980d8', '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#ffe900', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080'])
continousPal = colorPalette([(1.0, 1.0, 0.8980392156862745, 1.0), (0.9990157631680123, 0.9996309111880046, 0.8926259131103422, 1.0), (0.9980315263360247, 0.9992618223760092, 0.8872126105344099, 1.0), (0.9970472895040369, 0.9988927335640139, 0.8817993079584775, 1.0), (0.9950788158400615, 0.9981545559400231, 0.8709727028066129, 1.0), (0.9940945790080739, 0.9977854671280277, 0.8655594002306806, 1.0), (0.9931103421760861, 0.9974163783160324, 0.8601460976547481, 1.0), (0.9921261053440984, 0.9970472895040369, 0.8547327950788158, 1.0), (0.990157631680123, 0.9963091118800461, 0.8439061899269512, 1.0), (0.9891733948481354, 0.9959400230680507, 0.8384928873510189, 1.0), (0.9881891580161476, 0.9955709342560554, 0.8330795847750865, 1.0), (0.9862206843521722, 0.9948327566320646, 0.8222529796232219, 1.0), (0.9852364475201846, 0.9944636678200692, 0.8168396770472895, 1.0), (0.9842522106881968, 0.9940945790080739, 0.8114263744713571, 1.0), (0.9832679738562091, 0.9937254901960785, 0.8060130718954248, 1.0), (0.9812995001922338, 0.9929873125720877, 0.7951864667435602, 1.0), (0.9803152633602461, 0.9926182237600923, 0.7897731641676278, 1.0), (0.9793310265282583, 0.992249134948097, 0.7843598615916955, 1.0), (0.977362552864283, 0.9915109573241061, 0.7735332564398308, 1.0), (0.9763783160322953, 0.9911418685121107, 0.7681199538638985, 1.0), (0.9753940792003075, 0.9907727797001153, 0.7627066512879661, 1.0), (0.9744098423683198, 0.99040369088812, 0.7572933487120338, 1.0), (0.9724413687043445, 0.9896655132641292, 0.7464667435601692, 1.0), (0.9714571318723568, 0.9892964244521338, 0.7410534409842369, 1.0), (0.970472895040369, 0.9889273356401385, 0.7356401384083044, 1.0), (0.9681660899653979, 0.9880507497116494, 0.7251518646674355, 1.0), (0.9644752018454441, 0.9865743944636679, 0.7224452133794694, 1.0), (0.9607843137254902, 0.9850980392156863, 0.7197385620915032, 1.0), (0.9570934256055363, 0.9836216839677048, 0.7170319108035371, 1.0), (0.9497116493656286, 0.9806689734717416, 0.7116186082276048, 1.0), (0.9460207612456747, 0.9791926182237601, 0.7089119569396386, 1.0), (0.9423298731257209, 0.9777162629757786, 0.7062053056516724, 1.0), (0.938638985005767, 0.976239907727797, 0.7034986543637063, 1.0), (0.9312572087658593, 0.973287197231834, 0.6980853517877739, 1.0), (0.9275663206459054, 0.9718108419838524, 0.6953787004998078, 1.0), (0.9238754325259515, 0.9703344867358709, 0.6926720492118416, 1.0), (0.9164936562860438, 0.9673817762399077, 0.6872587466359092, 1.0), (0.91280276816609, 0.9659054209919262, 0.684552095347943, 1.0), (0.9091118800461361, 0.9644290657439446, 0.6818454440599769, 1.0), (0.9054209919261822, 0.9629527104959631, 0.6791387927720107, 1.0), (0.8980392156862745, 0.96, 0.6737254901960784, 1.0), (0.8943483275663207, 0.9585236447520185, 0.6710188389081122, 1.0), (0.8906574394463668, 0.957047289504037, 0.6683121876201461, 1.0), (0.883275663206459, 0.9540945790080738, 0.6628988850442137, 1.0), (0.8795847750865051, 0.9526182237600923, 0.6601922337562476, 1.0), (0.8758938869665513, 0.9511418685121107, 0.6574855824682814, 1.0), (0.8722029988465975, 0.9496655132641292, 0.6547789311803152, 1.0), (0.8648212226066897, 0.946712802768166, 0.6493656286043828, 1.0), (0.8611303344867358, 0.9452364475201845, 0.6466589773164167, 1.0), (0.857439446366782, 0.943760092272203, 0.6439523260284505, 1.0), (0.8496270665128797, 0.9405920799692425, 0.6385697808535178, 1.0), (0.8442137639369474, 0.9382545174932718, 0.6359861591695501, 1.0), (0.838800461361015, 0.9359169550173011, 0.6334025374855825, 1.0), (0.8333871587850826, 0.9335793925413303, 0.6308189158016148, 1.0), (0.822560553633218, 0.9289042675893887, 0.6256516724336794, 1.0), (0.8171472510572857, 0.9265667051134179, 0.6230680507497116, 1.0), (0.8117339484813533, 0.9242291426374472, 0.6204844290657439, 1.0), (0.806320645905421, 0.9218915801614763, 0.6179008073817762, 1.0), (0.7954940407535563, 0.9172164552095349, 0.6127335640138408, 1.0), (0.790080738177624, 0.914878892733564, 0.6101499423298731, 1.0), (0.7846674356016916, 0.9125413302575932, 0.6075663206459054, 1.0), (0.773840830449827, 0.9078662053056517, 0.60239907727797, 1.0), (0.7684275278738947, 0.9055286428296809, 0.5998154555940023, 1.0), (0.7630142252979624, 0.9031910803537101, 0.5972318339100346, 1.0), (0.75760092272203, 0.9008535178777394, 0.5946482122260669, 1.0), (0.7467743175701653, 0.8961783929257978, 0.5894809688581315, 1.0), (0.741361014994233, 0.893840830449827, 0.5868973471741638, 1.0), (0.7359477124183007, 0.8915032679738563, 0.5843137254901961, 1.0), (0.725121107266436, 0.8868281430219147, 0.5791464821222607, 1.0), (0.7197078046905037, 0.8844905805459439, 0.576562860438293, 1.0), (0.7142945021145714, 0.8821530180699731, 0.5739792387543252, 1.0), (0.708881199538639, 0.8798154555940023, 0.5713956170703576, 1.0), (0.6980545943867744, 0.8751403306420608, 0.5662283737024222, 1.0), (0.692641291810842, 0.87280276816609, 0.5636447520184544, 1.0), (0.6872279892349097, 0.8704652056901192, 0.5610611303344868, 1.0), (0.6759861591695502, 0.86560553633218, 0.5558938869665514, 1.0), (0.6694655901576317, 0.8627758554402153, 0.5533102652825836, 1.0), (0.6629450211457133, 0.8599461745482507, 0.550726643598616, 1.0), (0.6564244521337947, 0.8571164936562861, 0.5481430219146483, 1.0), (0.6433833141099577, 0.8514571318723568, 0.5429757785467129, 1.0), (0.6368627450980392, 0.8486274509803922, 0.5403921568627451, 1.0), (0.6303421760861208, 0.8457977700884276, 0.5378085351787774, 1.0), (0.6238216070742022, 0.8429680891964629, 0.5352249134948097, 1.0), (0.6107804690503653, 0.8373087274125337, 0.5300576701268743, 1.0), (0.6042599000384468, 0.834479046520569, 0.5274740484429066, 1.0), (0.5977393310265283, 0.8316493656286044, 0.5248904267589388, 1.0), (0.5846981930026913, 0.8259900038446751, 0.5197231833910034, 1.0), (0.5781776239907728, 0.8231603229527105, 0.5171395617070358, 1.0), (0.5716570549788543, 0.8203306420607459, 0.514555940023068, 1.0), (0.5651364859669358, 0.8175009611687812, 0.5119723183391004, 1.0), (0.5520953479430988, 0.811841599384852, 0.5068050749711649, 1.0), (0.5455747789311803, 0.8090119184928873, 0.5042214532871973, 1.0), (0.5390542099192619, 0.8061822376009228, 0.5016378316032295, 1.0), (0.5260130718954248, 0.8005228758169936, 0.4964705882352941, 1.0), (0.5194925028835063, 0.7976931949250289, 0.4938869665513264, 1.0), (0.5129719338715879, 0.7948635140330642, 0.4913033448673587, 1.0), (0.5064513648596695, 0.7920338331410997, 0.488719723183391, 1.0), (0.49341022683583236, 0.7863744713571703, 0.48355247981545557, 1.0), (0.4868896578239139, 0.7835447904652058, 0.4809688581314879, 1.0), (0.48036908881199536, 0.7807151095732411, 0.4783852364475202, 1.0), (0.4672049211841599, 0.7748096885813149, 0.4727873894655901, 1.0), (0.4604382929642445, 0.7714878892733564, 0.4693425605536332, 1.0), (0.4536716647443291, 0.7681660899653979, 0.46589773164167625, 1.0), (0.44690503652441366, 0.7648442906574394, 0.46245290272971934, 1.0), (0.4333717800845828, 0.7582006920415225, 0.45556324490580546, 1.0), (0.4266051518646674, 0.754878892733564, 0.4521184159938485, 1.0), (0.419838523644752, 0.7515570934256055, 0.44867358708189153, 1.0), (0.4130718954248366, 0.7482352941176471, 0.4452287581699346, 1.0), (0.39953863898500575, 0.7415916955017301, 0.43833910034602075, 1.0), (0.39277201076509033, 0.7382698961937716, 0.4348942714340638, 1.0), (0.3860053825451749, 0.7349480968858131, 0.4314494425221069, 1.0), (0.3724721261053441, 0.7283044982698962, 0.424559784698193, 1.0), (0.36570549788542867, 0.7249826989619377, 0.42111495578623603, 1.0), (0.35893886966551325, 0.7216608996539792, 0.41767012687427907, 1.0), (0.35217224144559783, 0.7183391003460208, 0.41422529796232216, 1.0), (0.338638985005767, 0.7116955017301038, 0.4073356401384083, 1.0), (0.33187235678585175, 0.7083737024221454, 0.40389081122645143, 1.0), (0.3251057285659361, 0.7050519031141869, 0.4004459823144944, 1.0), (0.3115724721261053, 0.6984083044982698, 0.39355632449058053, 1.0), (0.3048058439061899, 0.6950865051903113, 0.39011149557862357, 1.0), (0.29803921568627445, 0.6917647058823528, 0.38666666666666666, 1.0), (0.2912725874663591, 0.6884429065743944, 0.3832218377547097, 1.0), (0.27773933102652826, 0.6817993079584774, 0.3763321799307958, 1.0), (0.2709727028066128, 0.678477508650519, 0.37288735101883885, 1.0), (0.2642060745866974, 0.6751557093425605, 0.36944252210688194, 1.0), (0.25259515570934254, 0.6675893886966551, 0.36270665128796614, 1.0), (0.2489042675893887, 0.6627912341407151, 0.35950788158400615, 1.0), (0.2452133794694348, 0.657993079584775, 0.3563091118800461, 1.0), (0.24152249134948095, 0.653194925028835, 0.3531103421760861, 1.0), (0.23414071510957324, 0.643598615916955, 0.3467128027681661, 1.0), (0.23044982698961936, 0.638800461361015, 0.3435140330642061, 1.0), (0.2267589388696655, 0.634002306805075, 0.34031526336024603, 1.0), (0.22306805074971164, 0.629204152249135, 0.33711649365628604, 1.0), (0.21568627450980393, 0.6196078431372549, 0.330718954248366, 1.0), (0.21199538638985005, 0.6148096885813149, 0.327520184544406, 1.0), (0.2083044982698962, 0.6100115340253749, 0.32432141484044597, 1.0), (0.20092272202998845, 0.6004152249134949, 0.3179238754325259, 1.0), (0.1972318339100346, 0.5956170703575547, 0.31472510572856593, 1.0), (0.19354094579008074, 0.5908189158016147, 0.3115263360246059, 1.0), (0.18985005767012686, 0.5860207612456747, 0.3083275663206459, 1.0), (0.18246828143021915, 0.5764244521337947, 0.30193002691272586, 1.0), (0.17877739331026538, 0.5716262975778548, 0.2987312572087659, 1.0), (0.17508650519031144, 0.5668281430219146, 0.2955324875048059, 1.0), (0.1677047289504037, 0.5572318339100346, 0.2891349480968858, 1.0), (0.16401384083044984, 0.5524336793540946, 0.2859361783929258, 1.0), (0.16032295271049596, 0.5476355247981546, 0.2827374086889658, 1.0), (0.1566320645905421, 0.5428373702422146, 0.27953863898500575, 1.0), (0.14925028835063436, 0.5332410611303345, 0.27314109957708577, 1.0), (0.1455594002306805, 0.5284429065743945, 0.2699423298731257, 1.0), (0.14186851211072665, 0.5236447520184545, 0.2667435601691657, 1.0), (0.1340253748558247, 0.5150634371395617, 0.26163783160322956, 1.0), (0.1297193387158785, 0.5116186082276049, 0.260161476355248, 1.0), (0.12541330257593233, 0.5081737793156479, 0.25868512110726644, 1.0), (0.12110726643598617, 0.5047289504036909, 0.2572087658592849, 1.0), (0.11249519415609383, 0.49783929257977705, 0.2542560553633218, 1.0), (0.10818915801614765, 0.4943944636678201, 0.2527797001153403, 1.0), (0.10388312187620147, 0.4909496347558632, 0.2513033448673587, 1.0), (0.09957708573625529, 0.4875048058439062, 0.24982698961937716, 1.0), (0.09096501345636294, 0.48061514801999233, 0.2468742791234141, 1.0), (0.08665897731641677, 0.4771703191080354, 0.24539792387543252, 1.0), (0.0823529411764706, 0.47372549019607846, 0.24392156862745099, 1.0), (0.07374086889657824, 0.4668358323721646, 0.24096885813148788, 1.0), (0.06943483275663206, 0.4633910034602076, 0.23949250288350635, 1.0), (0.0651287966166859, 0.4599461745482507, 0.2380161476355248, 1.0), (0.06082276047673972, 0.45650134563629374, 0.23653979238754327, 1.0), (0.05221068819684736, 0.44961168781237987, 0.23358708189158017, 1.0), (0.04790465205690131, 0.446166858900423, 0.23211072664359866, 1.0), (0.04359861591695502, 0.442722029988466, 0.23063437139561707, 1.0), (0.034986543637062675, 0.4358323721645521, 0.227681660899654, 1.0), (0.030680507497116496, 0.43238754325259515, 0.22620530565167243, 1.0), (0.026374471357170318, 0.42894271434063824, 0.2247289504036909, 1.0), (0.02206843521722414, 0.4254978854286813, 0.22325259515570936, 1.0), (0.013456362937331795, 0.4186082276047674, 0.22029988465974626, 1.0), (0.009150326797385616, 0.41516339869281044, 0.21882352941176472, 1.0), (0.004844290657439437, 0.4117185697808535, 0.21734717416378319, 1.0), (0.0, 0.40407535563244906, 0.21417916186082278, 1.0), (0.0, 0.3997693194925029, 0.2124567474048443, 1.0), (0.0, 0.3954632833525567, 0.21073433294886584, 1.0), (0.0, 0.3911572472126105, 0.20901191849288736, 1.0), (0.0, 0.38254517493271817, 0.20556708958093042, 1.0), (0.0, 0.378239138792772, 0.20384467512495194, 1.0), (0.0, 0.3739331026528258, 0.20212226066897349, 1.0), (0.0, 0.36962706651287963, 0.200399846212995, 1.0), (0.0, 0.36101499423298733, 0.19695501730103807, 1.0), (0.0, 0.35670895809304115, 0.1952326028450596, 1.0), (0.0, 0.35240292195309497, 0.19351018838908113, 1.0), (0.0, 0.3437908496732026, 0.1900653594771242, 1.0), (0.0, 0.33948481353325644, 0.18834294502114574, 1.0), (0.0, 0.33517877739331026, 0.18662053056516725, 1.0), (0.0, 0.3308727412533641, 0.18489811610918877, 1.0), (0.0, 0.3222606689734717, 0.18145328719723186, 1.0), (0.0, 0.31795463283352565, 0.17973087274125343, 1.0), (0.0, 0.31364859669357936, 0.1780084582852749, 1.0), (0.0, 0.305036524413687, 0.17456362937331796, 1.0), (0.0, 0.3007304882737408, 0.1728412149173395, 1.0), (0.0, 0.29642445213379465, 0.17111880046136102, 1.0), (0.0, 0.2921184159938485, 0.16939638600538257, 1.0), (0.0, 0.28350634371395617, 0.16595155709342563, 1.0), (0.0, 0.27920030757401, 0.16422914263744715, 1.0), (0.0, 0.2748942714340638, 0.16250672818146866, 1.0)])
divergentPal = colorPalette([(0.2298057, 0.298717966, 0.753683153, 1.0), (0.23437707945098038, 0.3055417303294118, 0.7596795275882353, 1.0), (0.2389484589019608, 0.3123654946588235, 0.7656759021764705, 1.0), (0.24351983835294116, 0.3191892589882353, 0.7716722767647058, 1.0), (0.2526625972549019, 0.3328367876470588, 0.7836650259411765, 1.0), (0.25723397670588233, 0.3396605519764706, 0.7896614005294117, 1.0), (0.26180535615686273, 0.3464843163058824, 0.795657775117647, 1.0), (0.26638146835294113, 0.35330440842352945, 0.8016373194980392, 1.0), (0.27582712294117645, 0.36671691552941177, 0.812552935372549, 1.0), (0.2805499502352941, 0.37342316908235296, 0.818010743309804, 1.0), (0.28527277752941177, 0.38012942263529415, 0.8234685512470589, 1.0), (0.29471843211764703, 0.39354192974117647, 0.8343841671215686, 1.0), (0.2994412594117647, 0.40024818329411765, 0.8398419750588235, 1.0), (0.3041742870039216, 0.40694488283921565, 0.8452627266980393, 1.0), (0.30906031906666664, 0.41349827226666663, 0.8501276338666667, 1.0), (0.31883238319215684, 0.4266050511215686, 0.8598574482039216, 1.0), (0.32371841525490197, 0.4331584405490196, 0.864722355372549, 1.0), (0.32860444731764704, 0.43971182997647057, 0.8695872625411765, 1.0), (0.3383765114431373, 0.45281860883137254, 0.8793170768784313, 1.0), (0.34327752343529416, 0.45935363472941176, 0.8841219216235294, 1.0), (0.34832334141176474, 0.4657111465098039, 0.8883461629411764, 1.0), (0.3533691593882353, 0.47206865829019606, 0.8925704042588235, 1.0), (0.3634607953411765, 0.4847836818509804, 0.9010188868941177, 1.0), (0.36850661331764706, 0.49114119363137254, 0.9052431282117647, 1.0), (0.37355243129411764, 0.4974987054117647, 0.9094673695294118, 1.0), (0.383662065772549, 0.5101834172862746, 0.9178306732313726, 1.0), (0.38885187195294113, 0.5162984355764706, 0.9213734830823529, 1.0), (0.3940416781333333, 0.5224134538666667, 0.9249162929333333, 1.0), (0.39923148431372546, 0.5285284721568628, 0.9284591027843138, 1.0), (0.4096110966745098, 0.540758508737255, 0.9355447224862745, 1.0), (0.41480090285490195, 0.5468735270274511, 0.939087532337255, 1.0), (0.4199907090352941, 0.5529885453176471, 0.9426303421882353, 1.0), (0.42519897019607844, 0.559058179764706, 0.9460614570784314, 1.0), (0.4358148063058824, 0.5707073031529412, 0.951717381282353, 1.0), (0.4411227243607843, 0.5765318648470589, 0.9545453433843137, 1.0), (0.4464306424156863, 0.5823564265411765, 0.9573733054862745, 1.0), (0.4570464785254902, 0.5940055499294118, 0.963029229690196, 1.0), (0.4623543965803922, 0.5998301116235294, 0.9658571917921568, 1.0), (0.46767809468235294, 0.6055912316235293, 0.9685462810941176, 1.0), (0.4730701729882353, 0.6110774376156862, 0.970633588262745, 1.0), (0.48385432959999997, 0.6220498496, 0.9748082026, 1.0), (0.48924640790588236, 0.6275360555921569, 0.9768955097686275, 1.0), (0.49463848621176465, 0.6330222615843136, 0.9789828169372549, 1.0), (0.5054226428235293, 0.6439946735686275, 0.9831574312745098, 1.0), (0.5108243242509803, 0.6493966148235294, 0.9850787763764707, 1.0), (0.5162603025411764, 0.6544976105882353, 0.9864073998117647, 1.0), (0.5216962808313725, 0.6595986063529412, 0.9877360232470589, 1.0), (0.5325682374117646, 0.6698005978823529, 0.9903932701176471, 1.0), (0.5380042157019607, 0.6749015936470587, 0.9917218935529412, 1.0), (0.5434401939921568, 0.6800025894117647, 0.9930505169882353, 1.0), (0.5543118699137254, 0.6900970112156862, 0.9955155482352941, 1.0), (0.5597467255686274, 0.6947677280784313, 0.9960753091764706, 1.0), (0.5651815812235294, 0.6994384449411764, 0.9966350701176471, 1.0), (0.5706164368784313, 0.7041091618039216, 0.9971948310588236, 1.0), (0.5814861481882353, 0.7134505955294117, 0.9983143529411764, 1.0), (0.5869210038431373, 0.7181213123921568, 0.9988741138823529, 1.0), (0.5923558594980393, 0.7227920292549019, 0.9994338748235294, 1.0), (0.5977767754941177, 0.7273297248823529, 0.9997767317764705, 1.0), (0.6085473603411764, 0.7357252298235294, 0.9993538252980392, 1.0), (0.6139326527647059, 0.7399229822941177, 0.9991423720588235, 1.0), (0.6193179451882354, 0.7441207347647059, 0.9989309188196078, 1.0), (0.6300885300352941, 0.7525162397058823, 0.9985080123411765, 1.0), (0.6354738224588236, 0.7567139921764706, 0.9982965591019608, 1.0), (0.640827782372549, 0.7607515064117647, 0.9978457748823529, 1.0), (0.6461128107647058, 0.7644364965294117, 0.9968684625058823, 1.0), (0.6566828675490196, 0.7718064767647058, 0.9949138377529412, 1.0), (0.6619678959411764, 0.7754914668823529, 0.9939365253764706, 1.0), (0.6672529243333334, 0.7791764569999999, 0.992959213, 1.0), (0.677822981117647, 0.786546437235294, 0.9910045882470588, 1.0), (0.6830556815607843, 0.790042626890196, 0.9897684281843138, 1.0), (0.6881884831921569, 0.7931783792980391, 0.9880381043568628, 1.0), (0.6933212848235294, 0.7963141317058823, 0.9863077805294118, 1.0), (0.7035868880862746, 0.8025856365215686, 0.9828471328745098, 1.0), (0.7087196897176471, 0.8057213889294117, 0.9811168090470588, 1.0), (0.7138524913490196, 0.8088571413372548, 0.9793864852196078, 1.0), (0.724041371882353, 0.8149103926470588, 0.9756509706470589, 1.0), (0.7289695795686274, 0.8174641357058824, 0.973187668372549, 1.0), (0.7338977872549018, 0.8200178787647059, 0.9707243660980392, 1.0), (0.7388259949411764, 0.8225716218235294, 0.9682610638235294, 1.0), (0.7486824103137254, 0.8276791079411765, 0.9633344592745098, 1.0), (0.753610618, 0.830232851, 0.960871157, 1.0), (0.7585388256862745, 0.8327865940588235, 0.9584078547254902, 1.0), (0.7633627801019607, 0.8350922218196078, 0.9556576765568627, 1.0), (0.7727059486039215, 0.8389782172392156, 0.9493187599137255, 1.0), (0.777377532854902, 0.8409212149490196, 0.9461493015921568, 1.0), (0.7820491171058823, 0.8428642126588235, 0.9429798432705883, 1.0), (0.7913922856078431, 0.8467502080784314, 0.9366409266274509, 1.0), (0.7960638698588236, 0.8486932057882353, 0.9334714683058823, 1.0), (0.8006008472941177, 0.8503583215607843, 0.9300075603921568, 1.0), (0.8049647588235295, 0.8516661605568627, 0.9261650744313725, 1.0), (0.8136925818823529, 0.8542818385490196, 0.9184801025098039, 1.0), (0.8180564934117647, 0.8555896775450981, 0.9146376165490196, 1.0), (0.8224204049411765, 0.8568975165411765, 0.9107951305882354, 1.0), (0.831148228, 0.8595131945333333, 0.9031101586666667, 1.0), (0.8353447113529412, 0.8605139972941176, 0.8989704099411765, 1.0), (0.839351442772549, 0.861166825654902, 0.8944937634156863, 1.0), (0.8433581741921568, 0.8618196540156863, 0.8900171168901961, 1.0), (0.8513716370313725, 0.8631253107372548, 0.8810638238392158, 1.0), (0.8553783684509804, 0.8637781390980391, 0.8765871773137255, 1.0), (0.8593850998705882, 0.8644309674588235, 0.8721105307882353, 1.0), (0.8674276350862745, 0.864376599772549, 0.8626024620196079, 1.0), (0.8714925112588235, 0.8623093793176471, 0.8570162640588236, 1.0), (0.8755573874313726, 0.860242158862745, 0.8514300660980393, 1.0), (0.8796222636039216, 0.8581749384078431, 0.845843868137255, 1.0), (0.8877520159490196, 0.8540404974980391, 0.8346714722156863, 1.0), (0.8918168921215687, 0.8519732770431372, 0.829085274254902, 1.0), (0.8958817682941177, 0.8499060565882353, 0.8234990762941177, 1.0), (0.8995432066000001, 0.8475002359999999, 0.8177890744, 1.0), (0.9061541340352941, 0.8420910651764706, 0.8061505930823529, 1.0), (0.9094595977529412, 0.8393864797647058, 0.8003313524235294, 1.0), (0.9127650614705882, 0.8366818943529412, 0.7945121117647058, 1.0), (0.9193759889058823, 0.8312727235294118, 0.7828736304470588, 1.0), (0.9226814526235294, 0.8285681381176471, 0.7770543897882353, 1.0), (0.925563423, 0.8255172980705883, 0.7711363078117647, 1.0), (0.9281160096666666, 0.8221971488627451, 0.765141349254902, 1.0), (0.933221183, 0.8155568504470588, 0.7531514321411764, 1.0), (0.9357737696666666, 0.8122367012392158, 0.7471564735843139, 1.0), (0.9383263563333333, 0.8089165520313726, 0.741161515027451, 1.0), (0.9434315296666667, 0.8022762536156862, 0.7291715979137255, 1.0), (0.945540298909804, 0.7986057405333333, 0.7231054172980392, 1.0), (0.9473454036, 0.7946955048, 0.7169905058, 1.0), (0.9491505082901961, 0.7907852690666667, 0.7108755943019608, 1.0), (0.9527607176705882, 0.7829647976, 0.6986457713058823, 1.0), (0.9545658223607844, 0.7790545618666667, 0.6925308598078431, 1.0), (0.9563709270509804, 0.7751443261333334, 0.6864159483098039, 1.0), (0.9595176584705882, 0.7669728545098039, 0.6741447150392157, 1.0), (0.9605811984235294, 0.7625010185254902, 0.6679635471019607, 1.0), (0.9616447383764706, 0.7580291825411765, 0.6617823791647058, 1.0), (0.9627082783294117, 0.7535573465568628, 0.655601211227451, 1.0), (0.9648353582352941, 0.7446136745882352, 0.6432388753529412, 1.0), (0.9658988981882353, 0.7401418386039216, 0.6370577074156862, 1.0), (0.9669624381411764, 0.7356700026196078, 0.6308765394784314, 1.0), (0.9675442976352941, 0.7308497161882352, 0.6246854782352941, 1.0), (0.968203399, 0.7208441, 0.6122929913333334, 1.0), (0.9685329496823529, 0.7158412919058823, 0.6060967478823529, 1.0), (0.9688625003647059, 0.7108384838117647, 0.5999005044313725, 1.0), (0.9695216017294117, 0.7008328676235294, 0.5875080175294117, 1.0), (0.9698511524117647, 0.6958300595294117, 0.5813117740784314, 1.0), (0.9696829796666666, 0.6904839307372549, 0.5751383613647059, 1.0), (0.9692885689999999, 0.6849817470823529, 0.5689753262588235, 1.0), (0.9684997476666667, 0.673977379772549, 0.5566492560470588, 1.0), (0.968105337, 0.6684751961176472, 0.5504862209411766, 1.0), (0.9677109263333333, 0.6629730124627451, 0.5443231858352942, 1.0), (0.966922105, 0.6519686451529412, 0.5319971156235295, 1.0), (0.9660167198392157, 0.6461297415882352, 0.5258903482588235, 1.0), (0.9649113881372549, 0.6401590780588234, 0.5198055987058824, 1.0), (0.963806056435294, 0.6341884145294118, 0.5137208491529413, 1.0), (0.9615953930313725, 0.6222470874705882, 0.5015513500470589, 1.0), (0.9604900613294117, 0.6162764239411764, 0.49546660049411767, 1.0), (0.9593847296274509, 0.6103057604117648, 0.4893818509411765, 1.0), (0.9566532109764706, 0.598033822717647, 0.4773022923529412, 1.0), (0.9548534056117647, 0.5916223450078432, 0.4713374634901961, 1.0), (0.9530536002470588, 0.5852108672980392, 0.465372634627451, 1.0), (0.951253794882353, 0.5787993895882353, 0.4594078057647059, 1.0), (0.9476541841529411, 0.5659764341686274, 0.4474781480392157, 1.0), (0.9458543787882353, 0.5595649564588235, 0.44151331917647063, 1.0), (0.9440545734235294, 0.5531534787490197, 0.4355484903137255, 1.0), (0.9417279298235294, 0.5464134770196079, 0.429707070372549, 1.0), (0.9367796132117647, 0.5327495001098039, 0.41809333948627453, 1.0), (0.9343054549058823, 0.525917511654902, 0.4122864740431373, 1.0), (0.9318312966, 0.5190855232, 0.4064796086, 1.0), (0.9268829799882353, 0.5054215462901961, 0.3948658777137255, 1.0), (0.9244088216823529, 0.49858955783529413, 0.38905901227058826, 1.0), (0.921406221227451, 0.49142041718431373, 0.38340843537647057, 1.0), (0.9182816725843137, 0.48417347218039214, 0.37779392507058823, 1.0), (0.9120325752980393, 0.469679582172549, 0.36656490445882356, 1.0), (0.908908026654902, 0.46243263716862765, 0.36095039415294133, 1.0), (0.9057834780117647, 0.4551856921647059, 0.35533588384705883, 1.0), (0.8995343807254902, 0.4406918021568627, 0.34410686323529416, 1.0), (0.8958845948352941, 0.43307455670588235, 0.3386806345176471, 1.0), (0.8921375427882353, 0.4253887370980392, 0.33328927276078435, 1.0), (0.8883904907411765, 0.41770291749019606, 0.32789791100392157, 1.0), (0.8808963866470588, 0.4023312782745098, 0.3171151874901961, 1.0), (0.8771493346, 0.39464545866666667, 0.31172382573333335, 1.0), (0.8734022825529412, 0.3869596390588235, 0.3063324639764706, 1.0), (0.8653913329372549, 0.3711276720470588, 0.2957689564156863, 1.0), (0.8610536002941176, 0.3629157635294118, 0.2906281271764706, 1.0), (0.8567158676509804, 0.3547038550117647, 0.2854872979372549, 1.0), (0.8523781350078431, 0.34649194649411763, 0.2803464686980392, 1.0), (0.8437026697215686, 0.3300681294588235, 0.2700648102196078, 1.0), (0.8393649370784314, 0.32185622094117644, 0.26492398098039216, 1.0), (0.8350272044352941, 0.3136443124235294, 0.25978315174117644, 1.0), (0.8301865219490197, 0.30473276355294115, 0.25489142806666665, 1.0), (0.8204010983882353, 0.2867649126352941, 0.2451595198, 1.0), (0.8155083866078432, 0.2777809871764706, 0.24029356566666665, 1.0), (0.810615674827451, 0.26879706171764706, 0.23542761153333333, 1.0), (0.8008302512666666, 0.2508292108, 0.22569570326666666, 1.0), (0.7959375394862745, 0.24184528534117647, 0.22082974913333334, 1.0), (0.7905615319411765, 0.23139699905882352, 0.21624203829411764, 1.0), (0.7851533046784314, 0.2208510887215686, 0.21167287700784312, 1.0), (0.7743368501529412, 0.19975926804705882, 0.2025345544352941, 1.0), (0.7689286228901963, 0.18921335770980421, 0.19796539314901973, 1.0), (0.763520395627451, 0.17866744737254903, 0.1933962318627451, 1.0), (0.7527039411019608, 0.1575756266980392, 0.1842579092901961, 1.0), (0.7468380122117647, 0.14002101948235293, 0.17999609695686275, 1.0), (0.7409573187529412, 0.12224032527058823, 0.17574419910588235, 1.0), (0.7350766252941177, 0.10445963105882351, 0.17149230125490195, 1.0), (0.7233152383764706, 0.06889824263529411, 0.16298850555294117, 1.0), (0.717434544917647, 0.05111754842352939, 0.15873660770196077, 1.0), (0.7115538514588235, 0.03333685421176469, 0.1544847098509804, 1.0)], is_divergent=True)
grayscalePal = colorPalette(['#000000', '#080808', '#101010', '#181818', '#202020', '#282828', '#303030', '#383838', '#404040', '#484848', '#505050', '#585858', '#606060', '#686868', '#696969', '#707070', '#787878', '#808080', '#888888', '#909090', '#989898', '#A0A0A0', '#A8A8A8', '#A9A9A9', '#B0B0B0', '#B8B8B8', '#BEBEBE', '#C0C0C0', '#C8C8C8', '#D0D0D0', '#D3D3D3', '#D8D8D8', '#DCDCDC', '#E0E0E0', '#E8E8E8', '#F0F0F0', '#F5F5F5', '#F8F8F8', '#FFFFFF'])

def divBar(l, c, palette=discretePal):
    h = '<div style="width: 50px; height: 20px;">'
    N = np.sum(l)
    for i in range(0, len(l)):
        e = l[i]
        w = 5+int((float(e)/c)*45)
        g = int((float(e)/N)*20)
        h+='<div style="width: '+str(w)+'px; height: '+str(g)+'px; background-color: '+palette[i]+';"></div>'
    return h + '</div>'

def hide_fake_axis(ax, prop=None, handletextpad=None, msize=None):
    ax.set_xlim(1,2)
    ax.set_ylim(1,2)
    ax.axis('off')
    lgnd = ax.legend(frameon=False, loc=2, handletextpad=handletextpad, prop=prop)
    if msize != None:
        for h in lgnd.legendHandles:
            h.set_width(msize)
    return ax

def emptyFig():
    fig = plt.figure()
    ax = plt.subplots(111)
    return ax, fig

def plotCellTree(order, dis, cellcolors, collabels, title='', figdim={'figsize': (7.2,2.2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    fig = plt.figure(**figdim)
    ax = plt.subplot2grid((5, 7), (0, 0), rowspan=3, colspan=5)
    ax2 = plt.subplot2grid((5, 7), (3, 0), rowspan=2, colspan=5, sharex=ax)
    ax4 = plt.subplot2grid((5, 7), (0, 5), rowspan=5, colspan=1)
    ax5 = plt.subplot2grid((5, 7), (0, 6), rowspan=5, colspan=1)
    fig.subplots_adjust(left=0.02, bottom=0, wspace = 0.1)
    oldLw = matplotlib.rcParams['lines.linewidth']
    matplotlib.rcParams['lines.linewidth'] = 0.2
    dendro, linkage = dis.dendroFromDist(dis.distances, dis.labels, ax=ax)
    matplotlib.rcParams['lines.linewidth'] = oldLw
    tl = ax.get_xticks()
    step = tl[1]-tl[0]
    bot = 0
    for l in dendro['leaves']:
        l2, l3, l4 = cellcolors[dendro['ivl'][l]]
        ax2.barh(9, step, left=bot, color=palette[l4], linewidth=0, height=1, alpha=0.7)
        ax2.barh(5, step, left=bot, color=palette[l2], linewidth=0, height=1, alpha=0.7)
        ax2.barh(1, step, left=bot, color=palette[l3], linewidth=0, height=1, alpha=0.7)
        bot += step
    ax2.text(50, 10, 'Cluster', fontsize=fonthi[0])
    ax2.text(50, 6, 'Sample', fontsize=fonthi[0])
    ax2.text(50, 2, 'Cell type', fontsize=fonthi[0])
    ax2.set_ylim(0, 12)
    for i in range(0, len(collabels[0][1])):
        ax4.scatter(-1, -1, color=palette[i], label=collabels[0][1][i], alpha=0.9)
    for i in range(0, len(collabels[1][1])):
        ax5.scatter(-1, -1, color=palette[i], label=collabels[1][1][i], alpha=0.4)   
    ax.axis('off')
    ax2.axis('off')
    ax4 = hide_fake_axis(ax4, prop={'size': fonthi[0]})
    ax5 = hide_fake_axis(ax5, prop={'size': fonthi[0]})
    fig.suptitle(title, fontsize=fonthi[1])
    return fig

def plotGrTree(distances, groups, colors, title='', figdim={'figsize': (7.2,2.2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    fig = plt.figure(**figdim)
    ax = plt.subplot2grid((5, 7), (0, 0), rowspan=4, colspan=7)
    try:
        distances.groupTree(groups, ax=ax)
    except:
        pass
    fig.subplots_adjust(bottom=0.4)
    fig.suptitle(title, fontsize=fonthi[1])
    for t in ax.get_xticklabels():
        t.set_color(palette[colors[t.get_text().split(', ')[0]]])
        t.set_rotation(45)
        t.set_horizontalalignment('right')
        t.set_fontsize(fonthi[0])
    ax.get_yaxis().set_visible(False)
    return fig

def plotSimpleHeat(distance, title='', figdim={'figsize': (9.7,7.2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    fig = plt.figure(**figdim)
    ax = plt.subplot2grid((9, 7), (1, 1), rowspan=8, colspan=6)
    ax_t = plt.subplot2grid((9, 7), (0, 1), rowspan=1, colspan=6)#, sharex=ax)
    ax_s = plt.subplot2grid((9, 7), (1, 0), rowspan=8, colspan=1)#, sharex=ax)
    fig.subplots_adjust(bottom=0.1, hspace=0.4)
    f, t1, t2 = distance.biClustMap(ax1=ax_s, ax2=ax_t)
    ax.imshow(f, aspect='auto')
    nxl = []
    for xl in ax_t.get_xticklabels():
        nxl.append('K'+str(1+int(xl.get_text())))
    ax_t.set_xticklabels(nxl, fontsize=fonthi[0])
    ax.axis('off')
    ax_s.axis('off')
    ax_t.get_yaxis().set_visible(False)
    ax_t.spines['top'].set_visible(False)
    ax_t.spines['bottom'].set_visible(False)
    ax_t.spines['left'].set_visible(False)
    ax_t.spines['right'].set_visible(False)
    ax_t.tick_params(bottom="off", left="off")
    fig.suptitle(title, fontsize=fonthi[1])
    return fig

def plotHorGrStBar(data, labels, xticks=[], title= '', ylabel='', ydim=None, ax=None, figdim={'figsize': (3.5,2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal, secondarypalette=grayscalePal, hubysec=False):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=5)
        ax2 = plt.subplot2grid((1, 7), (0, 5), colspan=2)
    else:
        fig = ax.get_figure()
    #fig.set_size_inches(3.5, 2))
    fig.subplots_adjust(left=0.17, bottom=0.2, wspace = -0.15)
    if hubysec:
        ppalette = secondarypalette
        hpalette = palette
    else:
        ppalette = palette
    N = len(xticks)
    M = len(labels)
    labels = labels[::-1]
    bot = [0 for x in range(0, M)]
    for i in range(0, N):
        y = [data[j][i] for j in range(0, M)]
        x = [x+1 for x in range(0, M)]
        ifi = i+0
        edgecol = None
        linewidth = 0
        if hubysec:
            ifi = float(i)/N
            edgecol = [hpalette[j] for j in range(0, M)]
            linewidth = 1
        ax.barh(x, y, left=bot, color=ppalette[ifi], edgecolor=edgecol, linewidth=linewidth, height=0.6, alpha=0.7)
        ax2.bar(-1, -1, color=ppalette[ifi], label=xticks[i], width=0, alpha=0.7)
        bot = [bot[x]+y[x] for x in range(0, M)]
    groupWidth = 1
    ax2 = hide_fake_axis(ax2, handletextpad=0.1, prop={'size': fonthi[0]})
    ax.set_xlabel(ylabel, fontsize=fonthi[0])
    for yl in ax.get_xticklabels():
        yl.set_fontsize(fonthi[0])
    if ydim=='%':
        ax.set_xticks([x for x in np.arange(0, 1.1, 0.25)])
        ax.set_xticklabels([str(int(100*x))+'%' for x in np.arange(0, 1.1, 0.25)], fontsize=fonthi[0])
    ax.set_yticks([0.5+x+(groupWidth*0.5) for x in range(0, M)])
    ax.set_yticklabels(labels, fontsize=fonthi[0])
    fig.suptitle(title)
    return ax, fig

def plotGrStBar(data, labels, xticks=[], ylabel='', ydim=None, ax=None, figdim={'figsize': (3.5,2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=4)
        ax2 = plt.subplot2grid((1, 7), (0, 4), colspan=2)
    else:
        fig = ax.get_figure()
    #fig.set_size_inches(3.5, 2))
    fig.subplots_adjust(left=0.1, bottom=0.35, wspace = 0.1)
    N = len(xticks)
    M = len(labels)
    bot = [0 for x in range(0, M)]
    for i in range(0, N):
        y = [data[j][i] for j in range(0, M)]
        x = [x+1 for x in range(0, M)]
        ax.bar(x, y, bottom=bot, color=palette[i], edgecolor='white', width=0.6)
        ax2.bar(-1, -1, color=palette[i], label=xticks[i], width=0)
        bot = [bot[x]+y[x] for x in range(0, M)]
    groupWidth = 1
    ax2 = hide_fake_axis(ax2, prop={'size': fonthi[0]})
    ax.set_ylabel(ylabel, fontsize=fonthi[0])
    for yl in ax.get_yticklabels():
        yl.set_fontsize(fonthi[0])
    if ydim=='%':
        ax.set_yticks([x for x in np.arange(0, 1.1, 0.1)])
        ax.set_yticklabels([str(int(100*x))+'%' for x in np.arange(0, 1.1, 0.1)], fontsize=fonthi[0])
    ax.set_xticks([0.5+x+(groupWidth*0.5) for x in range(0, M)])
    ax.set_xticklabels(labels, fontsize=fonthi[0])
    return ax, fig

def plotGrSegBar(data, labels, xticks=[], ylabel='', ydim=None, ax=None, figdim={'figsize': (3.5,2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=4)
        ax2 = plt.subplot2grid((1, 7), (0, 4), colspan=2)
    else:
        fig = ax.get_figure()
    #fig.set_size_inches(3.5, 2))
    fig.subplots_adjust(left=0.1, bottom=0.35, wspace = 0.1)
    N = len(xticks)
    M = len(labels)
    bot = [0 for x in range(0, M)]
    for i in range(0, N):
        y = [data[j][i] for j in range(0, M)]
        x = [x+1 for x in range(0, M)]
        ax.bar(x, y, bottom=bot, color=palette[i], edgecolor='white', width=0.6)
        ax2.bar(-1, -1, color=palette[i], label=xticks[i], width=0)
        bot = [bot[x]+y[x] for x in range(0, M)]
    groupWidth = 1
    ax2 = hide_fake_axis(ax2, prop={'size': fonthi[0]})
    ax.set_ylabel(ylabel, fontsize=fonthi[0])
    for yl in ax.get_yticklabels():
        yl.set_fontsize(fonthi[0])
    if ydim=='%':
        ax.set_yticks([x for x in np.arange(0, 1.1, 0.1)])
        ax.set_yticklabels([str(int(100*x))+'%' for x in np.arange(0, 1.1, 0.1)], fontsize=fonthi[0])
    ax.set_xticks([0.5+x+(groupWidth*0.5) for x in range(0, M)])
    ax.set_xticklabels(labels, fontsize=fonthi[0])
    return ax, fig

def plotGrBar(data, labels, barWidth=None, xticks=[], ylabel='', ax=None, figdim={'figsize': (3.5,2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=6)
        ax2 = plt.subplot2grid((1, 7), (0, 6), colspan=1)
    else:
        fig = ax.get_figure()
    if barWidth == None:
        barWidth = 0.8/float(len(data))
    #fig.set_size_inches(3.5, 2)
    fig.subplots_adjust(left=0.1, bottom=0.2, wspace = 0.1)
    for i in range(0, len(data)):
        y = data[i]
        x = [x+(barWidth*i) for x in range(1, len(y)+1)]
        ax.bar(x, y, color=palette[i], width=barWidth, edgecolor='white')
        ax2.bar(-1, -1, color=palette[i], width=0, label=labels[i])
    groupWidth = barWidth*i
    ax2 = hide_fake_axis(ax2, prop={'size': fonthi[0]})
    ax.set_ylabel(ylabel, fontsize=fonthi[0])
    for yl in ax.get_yticklabels():
        yl.set_fontsize(fonthi[0])
    ax.set_xticks([x+(groupWidth*0.5) for x in range(1, len(xticks)+1)])
    ax.set_xticklabels(xticks, rotation=90, fontsize=fonthi[0])
    return ax, fig

def plotGrDivBar(data, labels, barWidth=None, xticks=[], ylabel='', ax=None, figdim={'figsize': (3.5,2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=5)
        ax2 = plt.subplot2grid((1, 7), (0, 5), colspan=2)
    else:
        fig = ax.get_figure()
    if barWidth == None:
        barWidth = 0.8/float(len(data))
    #fig.set_size_inches(3.5, 2)
    fig.subplots_adjust(left=0.15, bottom=0.41, wspace = 0.1)
    for i in range(0, len(data)):
        y = data[i]
        x = [x+(barWidth*i) for x in range(1, len(y)+1)]
        ax.bar(x, y, color=palette[i], width=barWidth, edgecolor='white')
        ax2.bar(-1, -1, color=palette[i], width=0, label=labels[i])
    groupWidth = barWidth*i
    ax2 = hide_fake_axis(ax2, prop={'size': fonthi[0]}, msize=8)
    ax.set_ylabel(ylabel, fontsize=fonthi[0])
    for yl in ax.get_yticklabels():
        yl.set_fontsize(fonthi[0])
    ax.set_xticks([x+(groupWidth*0.5) for x in range(1, len(xticks)+1)])
    ax.set_xticklabels(xticks, rotation=90, fontsize=fonthi[0])
    return ax, fig

def plotPairBubble(s1, s2, x, y, z, ax=None, figdim={'figsize': (3.5,2.6), 'dpi': 600}, fonthi=[8, 10, 14]):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = fig.add_subplot(111)
        fig.subplots_adjust(left=0.2, bottom=0.2)
    else:
        fig = ax.get_figure()
    ax.set_aspect(aspect=1, adjustable='box', anchor='SW')
    ax.scatter(x, y, s=z)
    ax.set_xlabel('Clonotype size in '+s1, fontsize=fonthi[0])
    ax.set_ylabel('Clonotype size in '+s2, fontsize=fonthi[0])
    lr = range(0, int(np.amax([x, y]))+6, 5)
    ax.set_xticks(lr)
    ax.set_xticklabels(lr, fontsize=fonthi[0])
    ax.set_xlim(left=0)
    ax.set_yticks(lr)
    ax.set_yticklabels(lr, fontsize=fonthi[0])
    ax.set_ylim(bottom=0)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    fig.suptitle('Overlap between clonotypes in a pair of samples', fontsize=fonthi[1])
    return ax, fig

def plotGridHist(data, xlab, ylab, zlab, collabels, order=None, palette=None, tickstep=2):
    cx, cy, cz = [], [], []
    N = 0
    for x, yl in data.iteritems():
        N += 1
        for y, zl in yl.iteritems():
            for z in zl:
                cx.append(x)
                cy.append(y)
                cz.append(z)
    data = {xlab: cx, ylab: cy, zlab: cz}
    df = pd.DataFrame(data)
    if palette == None:
        palette = sns.cubehelix_palette(N, rot=-.2, light=.5)
    midPal = int(len(palette)/2)
    g = sns.FacetGrid(df, row=xlab, hue=ylab, aspect=8, height=2, palette=palette, row_order=order)
    g.map(sns.kdeplot, zlab, clip_on=False, shade=True, alpha=.9, lw=1.5, bw=.2)
    g.map(sns.kdeplot, zlab, clip_on=False, lw=2, bw=.2, color='w')
    g.map(plt.axhline, y=0, lw=2, clip_on=False, color=palette[1])
    def label(x, color, label):
        if label == collabels[midPal]:
            for e in x:
                ax = plt.gca()
                ax.text(0, .2, e, fontweight='bold', color=color, alpha=.8, ha='left', va='center', transform=ax.transAxes)
                return
        
    g.map(label, xlab)
    g.fig.subplots_adjust(hspace=.25)
    g.set_titles('')
    g.set(yticks=[])
    g.despine(bottom=True, left=True)
    plt.xlabel(ylab, color=palette[midPal], fontweight='bold')
    plt.xticks(range(tickstep, tickstep*len(collabels)+tickstep, tickstep), collabels, color=palette[0])
    tl = plt.gca().get_xticklabels()
    for i in range(0, N):
        tl[i].set_color(palette[i])
    fig = plt.gcf()
    return fig

def plotGexDistribution(data, xlabel, ylabel, title='', axisrotation=None, huerder=None, order=None, ylim=None, ax=None, hue=None, condensed=True, show_violin=True, show_swarm=True, show_box=True, show_strip=True, figdim={'figsize': (7.2,2.2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=6)
        ax2 = plt.subplot2grid((1, 7), (0, 6), colspan=1)
    else:
        fig = ax.get_figure()
    if condensed:
        cx, cy, hueli = [], [], []
        for x, yl in data.iteritems():
            if x != hue:
                for i in range(0, len(yl)):
                    cx.append(x)
                    cy.append(yl[i])
                    if hue != None:
                        hueli.append(data[hue][i])
        if hue == None:
            data = {xlabel: cx, ylabel: cy}
        else:
            data = {xlabel: cx, ylabel: cy, hue: hueli}
    if huerder != None:
        if hue != None:
            new = zip(data[xlabel], data[ylabel], data[hue])
            new.sort(key=lambda x: huerder.index(x[2]))
            new=zip(*new)
            data = {xlabel: new[0][:], ylabel: new[1][:], hue: new[2][:]}
            new = ''
            for i in range(0, len(huerder)):
                ax2.scatter(-1, -1, color=palette[i], label=huerder[i], alpha=0.8)
    ax2 = hide_fake_axis(ax2, prop={'size': fonthi[0]})
    df = pd.DataFrame(data)
    if show_violin:
        ax = sns.violinplot(x=xlabel, y=ylabel, data=df, linewidth=0.1, inner=None, order=order, palette=palette, hue=hue, ax=ax)
    if show_swarm:
        ax = sns.swarmplot(x=xlabel, y=ylabel, data=df, color='white', edgecolor='gray', size=1, order=order, hue=hue, ax=ax)
    if show_box:
        ax = sns.boxplot(x=xlabel, y=ylabel, data=df, linewidth=0.5, saturation=0.6, boxprops={'alpha': 0.6}, showfliers=False, order=order, hue=hue, ax=ax)
        #ax = sns.boxplot(x=xlabel, y=ylabel, data=df, linewidth=1, boxprops={'facecolor': 'None'}, showfliers=False, order=order, hue=hue, ax=ax)
    if show_strip:
        ax = sns.stripplot(x=xlabel, y=ylabel, data=df, order=order, jitter=True, dodge=True, size=1, color='black', hue=hue, ax=ax)
        #ax = sns.stripplot(x=xlabel, y=ylabel, data=df, order=order, jitter=True, dodge=True, size=1, palette=palette, hue=hue, ax=ax)
    if ylim != None:
        ax.set_ylim(ylim[0], ylim[1])
    else:
        ax.set_ylim(bottom=0)
    if axisrotation != None:
        ax.set_xticklabels(ax.get_xticklabels(), rotation=axisrotation, va='top', ha='right')
        fig.subplots_adjust(bottom=0.35)
    for yl in ax.get_yticklabels():
        yl.set_fontsize(fonthi[0])
    for xl in ax.get_xticklabels():
        xl.set_fontsize(fonthi[0])
    ax.set_ylabel(ax.get_ylabel(), fontsize=fonthi[0])
    ax.set_xlabel(ax.get_xlabel(), fontsize=fonthi[0])
    ax.get_legend().remove()
    fig.suptitle(title, fontsize=fonthi[1])
    return ax, fig

def plotDistribution(data, xlabel, ylabel, title='', axisrotation=None, huerder=None, order=None, ylim=None, ax=None, hue=None, condensed=True, show_violin=True, show_swarm=False, show_box=False, show_strip=False, figdim={'figsize': (3.5,2), 'dpi': 600}, fonthi=[8, 10, 14], palette=discretePal):
    if ax == None:
        fig = plt.figure(**figdim)
        ax = plt.subplot2grid((1, 7), (0, 0), colspan=5)
        ax2 = plt.subplot2grid((1, 7), (0, 5), colspan=2)
    else:
        fig = ax.get_figure()
    if condensed:
        cx, cy, hueli = [], [], []
        for x, yl in data.iteritems():
            if x != hue:
                for i in range(0, len(yl)):
                    cx.append(x)
                    cy.append(yl[i])
                    if hue != None:
                        hueli.append(data[hue][i])
        if hue == None:
            data = {xlabel: cx, ylabel: cy}
        else:
            data = {xlabel: cx, ylabel: cy, hue: hueli}
    if huerder != None:
        if hue != None:
            new = zip(data[xlabel], data[ylabel], data[hue])
            new.sort(key=lambda x: huerder.index(x[2]))
            new=zip(*new)
            data = {xlabel: new[0][:], ylabel: new[1][:], hue: new[2][:]}
            new = ''
            for i in range(0, len(huerder)):
                ax2.scatter(-1, -1, color=palette[i], label=huerder[i], alpha=0.8)
    ax2 = hide_fake_axis(ax2, prop={'size': fonthi[0]})
    fig.subplots_adjust(left=0.18, bottom=0.3, wspace = 0.1)
    df = pd.DataFrame(data)
    if show_violin:
        ax = sns.violinplot(x=xlabel, y=ylabel, data=df, linewidth=0.1, inner=None, order=order, palette=palette, hue=hue, ax=ax)
    if show_swarm:
        ax = sns.swarmplot(x=xlabel, y=ylabel, data=df, color='white', edgecolor='gray', size=1, order=order, hue=hue, ax=ax)
    if show_box:
        ax = sns.boxplot(x=xlabel, y=ylabel, data=df, linewidth=0.5, saturation=0.6, boxprops={'alpha': 0.6}, showfliers=False, order=order, hue=hue, ax=ax)
        #ax = sns.boxplot(x=xlabel, y=ylabel, data=df, linewidth=1, boxprops={'facecolor': 'None'}, showfliers=False, order=order, hue=hue, ax=ax)
    if show_strip:
        ax = sns.stripplot(x=xlabel, y=ylabel, data=df, order=order, jitter=True, dodge=True, size=1, color='black', hue=hue, ax=ax)
        #ax = sns.stripplot(x=xlabel, y=ylabel, data=df, order=order, jitter=True, dodge=True, size=1, palette=palette, hue=hue, ax=ax)
    if ylim != None:
        ax.set_ylim(ylim[0], ylim[1])
    if axisrotation != None:
        ax.set_xticklabels(ax.get_xticklabels(), rotation=axisrotation, va='top', ha='right')
        fig.subplots_adjust(bottom=0.2)
    nxl = []
    oxl = ax.get_xticklabels()
    for i in range(0, len(oxl)):
        tx = oxl[i].get_text()
        if i % 2 == 0:
            nxl.append(tx)
        else:
            nxl.append('\n'+tx)
    ax.set_xticklabels(nxl, fontsize=fonthi[0])
    for yl in ax.get_yticklabels():
        yl.set_fontsize(fonthi[0])
    ax.set_ylabel(ax.get_ylabel(), fontsize=fonthi[0])
    ax.set_xlabel(ax.get_xlabel(), fontsize=fonthi[0])
    ax.get_legend().remove()
    fig.suptitle(title, fontsize=fonthi[1])
    return ax, fig

def plotFlowChain(regions, segFreqs, lineWidths, palette, freqTh=5, showlines=True, ylabel='', regionlabels=None, title='', ax=None):
    if ax == None:
        fig = plt.figure()
        ax = fig.add_subplot(111)
    else:
        fig = ax.get_figure()
    if regionlabels == None:
        regionlabels = regions[:]
    orderlists, bottoms = {}, {}
    M = sum(lineWidths.values())
    ic = 0
    for region in regions:
        N = len(segFreqs[region])
        ic += 1
        yl, ol = [], []
        baseline, cc = 0, 0
        for m, n in segFreqs[region].most_common()[::-1]:
            if not showlines:
                put_text = False
                color = palette[freqTh]
                if N-cc < freqTh:
                    color = palette[N-cc-1]
                    put_text = True
                ax.bar(ic, n, width=.2, bottom=baseline, color=color)
                if put_text:
                    ax.text(ic-0.1, baseline+n, m, color='black')
            ol.append(m)
            bottoms[m] = baseline
            cc += 1
            baseline += n
        orderlists[region] = ol
    if showlines:
        shadows = {}
        for k, v in bottoms.iteritems():
            shadows[k] = 0
        segiter = [orderlists[x] for x in regions[1:]]
        lN = len(orderlists[regions[0]])
        for i in range(0, lN):
            if lN-i < freqTh:
                cc = lN-i-1
            else:
                cc = 5
            seg_start = orderlists[regions[0]][i]
            for seg_comb in itertools.product(*segiter):
                seg_comb = [seg_start]+list(seg_comb)
                seg = '|'.join(seg_comb)
                if seg in lineWidths:
                    for j in range(0, lineWidths[seg]):
                        x, y, colc = [], [], 0.0
                        for seg_part in seg_comb:
                            colc += 1
                            x.append(colc-0.1)
                            x.append(colc+0.1)
                            y.append(bottoms[seg_part]+shadows[seg_part]+0.5)
                            y.append(bottoms[seg_part]+shadows[seg_part]+0.5)
                            shadows[seg_part]+=1
                        ax.plot(x, y, color=palette[cc], alpha=.7, lw=3, zorder=-1)
        ic = 0
        for region in regions:
            ic += 1
            baseline, cc = 0, 0
            for m, n in segFreqs[region].most_common()[::-1]:
                if n > freqTh:
                    ax.text(ic-0.1, baseline+n, m, color='black')
                    ax.bar(ic, n, width=.2, bottom=baseline, color='w', edgecolor='grey', alpha=.4)
                baseline += n
                cc += 1
    ax.set_ylabel(ylabel)
    ax.set_xticklabels(['']+regionlabels, rotation='vertical')
    ax.set_title(title)
    return ax, fig

def plotSeqLogo(sequences, palette='aa_chemistry', title='', xlabel='Amino acid position', ax=None, y_ln=30):
    colors = {'aa_chemistry': {'G': 'green', 'S': 'green', 'T': 'green', 'Y': 'green', 'C': 'green', 'K': 'blue', 'R': 'blue', 'H': 'blue', 'Q': 'magenta', 'N': 'magenta', 'D': 'red', 'E': 'red', 'A': 'black', 'V': 'black', 'L': 'black', 'I': 'black', 'P': 'black', 'W': 'black', 'F': 'black', 'M': 'black'}}
    colors = colors[palette]
    #hydrophobic 'black'; acidic 'red'; basic 'blue'; neutral 'magenta'; polar 'green'
    if ax == None:
        fig = plt.figure()
        ax = fig.add_subplot(111)
    else:
        fig = ax.get_figure()
    letter_freq, axis_length = [], 0
    for seq in sequences:
        if len(seq) > axis_length:
            axis_length = len(seq)
    for i in range(0, axis_length):
        letter_freq.append(collections.Counter())
    for seq in sequences:
        for i in range(0, len(seq)):
            letter_freq[i][seq[i]] += 1
    ax.set_ylim(0, y_ln)
    ax.set_xlim(0, 2*(axis_length))
    ax.set_xticks(range(1, 2*(axis_length), 2))
    ax.set_xticklabels(range(1, axis_length+1))
    ax.set_xlabel(xlabel)
    for i in range(0, axis_length):
        prevy = 0
        for m, n in letter_freq[i].most_common():
            try:
                color = colors[m]
            except:
                color = yellow
            ax.text((2*i)+1, prevy+1, m, color=color, fontsize=8*np.sqrt(n), horizontalalignment='center', verticalalignment='baseline')
            prevy += np.sqrt(n)
    ax.get_yaxis().set_visible(False)
    plt.title(title)
    return ax, fig

def plotPojection(data, catorder=None, xlabel='', ylabel='', title='', alpha=0.6, marker='.', size=25, edgecolors='none', background=[[], []], backgroundcolor='grey', backgroundalpha=0.6, backgroundmarker='.', backgroundsize=15, backgroundedgecolors='none', figdim={'figsize': (3.5,2.6), 'dpi': 600}, fonthi=[8, 10, 14], ax=None, palette=discretePal):
    valid_input = False
    pgroup = 0
    if type(data) == dict:
        valid_input = True
        pgroup = -1
        if catorder == None:
            catorder = list(data.keys())
    if type(data) == list:
        if len(data) == 3:
            valid_input = True
            pgroup = 1
    if ax == None:
        fig = plt.figure(**figdim)
        if pgroup < 1:
            ax = plt.subplot2grid((1, 4), (0, 0), colspan=3)
            ax2 = plt.subplot2grid((1, 4), (0, 3), colspan=1)
        else:
            ax = fig.add_subplot(111)
    else:
        fig = ax.get_figure()
    if palette == None:
        palette = colget
    if valid_input:
        ax.scatter(background[0], background[1], color=backgroundcolor, alpha=backgroundalpha, marker=backgroundmarker, s=backgroundsize, edgecolors=backgroundedgecolors)
        if pgroup < 1:
            cc = 0
            for k in catorder:
                v = data[k]
                ax.scatter(v[0], v[1], color=palette[cc], alpha=alpha, marker=marker, s=size, edgecolors=edgecolors)
                ax2.scatter(0, 0, color=palette[cc], alpha=alpha, marker=marker, s=size, edgecolors=edgecolors, label=k)
                cc += 1
            ax2.set_xlim(1,2)
            ax2.set_ylim(1,2)
            ax2.axis('off')
            ax2.legend(frameon=False, loc=2, prop={'size': fonthi[0]})
            fig.subplots_adjust(left=0.06, bottom=0.06, wspace = -0.16)
        else:
            x, y, z = data
            ax.scatter(x, y, c=palette[z], alpha=alpha, marker=marker, s=size, edgecolors=edgecolors)
    #ax.get_xaxis().set_visible(False)
    #ax.get_yaxis().set_visible(False)
    ax.tick_params(axis='both', which='both', left=False, right=False, bottom=False, top=False, labelbottom=False, labeltop=False, labelleft=False, labelright=False)
    ax.set_xlabel('Dimension 1', fontsize=fonthi[0])
    ax.set_ylabel('Dimension 2', fontsize=fonthi[0])
    fig.suptitle(title, fontsize=fonthi[1])
    return ax, fig

if __name__ == '__main__':
    __main__()